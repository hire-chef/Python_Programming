// Complete code

#code
CLASS AVLNode:
    def __init__(self. data):
        self.data = data
        self.leftchild = None
        self.rightchild = None
        self.height = 1
        
    def SearchNode(rootNode, dummyNode):
        pass
    
    def getHeight(rootNode):
        if not rootNode:
            return 0
        return rootNode.height
        
    def RightRotate(disbalanceNode):
        newRoot = disbalanceNode.leftchild
        disbalanceNode.leftchild = disbalanceNode.leftchild.rightchild
        newRoot.rightchild = disbalanceNode
        disbalanceNode.height = 1 + max(getHeight(disbalanceNode.leftchild), getHeight(disbalanceNode.rightchild))
        newRoot.height = 1 + max(getHeight(newRoot.leftchild), getHeight(newRoot.rightchild))
        return newRoot
        
    def leftRotate(disbalanceNode):
        newRoot = disbalanceNode.rightchild
        disbalanceNode.rightchild = disbalanceNode.rightchild.leftchild
        newRoot.leftchild = disbalanceNode
        disbalanceNode.height = 1 + max(getHeight(disbalanceNode.leftchild), getHeight(disbalanceNode.rightchild))
        newRoot.height = 1 + max(getHeight(newRoot.leftchild), getHeight(newRoot.rightchild))
        return newRoot
        
    
    def LeftRightRotate(disbalanceNode):
        pass
        
    
    def RightLeftRotate(disbalanceNode):
        pass
    
    def InsertNode(self, data):
        pass
